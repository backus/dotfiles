autoload -U zmv

# Unix commands:

alias ae2='subl2 ~/.aliases'
alias ar2='source ~/.aliases'
alias map='xargs -L 1 -I "item"'
alias zcp="zmv -C"
alias path='echo $PATH | tr : "\n"'
alias la='ls -laG';
alias l='ls -l1G';
alias lr='ls -t1';
alias mmv='noglob zmv -W'

## directory navigation

alias dls='cd ~/Downloads;clear'
alias desktop='cd ~/Desktop;show;clear'
alias code="cd $coding/; clear;"
alias ..="cd .."
alias ...="cd ../.."

# Rails related:

export railsref="$coding/reference/rails"
export ref="$coding/reference"

# Rake

alias brT='bin/rake -T'

# RSpec
alias failing-spec-files="jq '.examples | map(select(.status==\"failed\")) | map(.file_path) | .[]' -r =(rspec -f json) | uniq"

# Docker
each_docker(){
  # get docker processes, cut for container ids, remove header, map command over each
  docker ps | cut -d' ' -f1 | tail -n +2 | xargs -L 1 docker $@
}
alias new_docker='docker images -q | head -n 1'
alias nd='new_docker'

# AWS CLI

amzn(){
  resp=`aws $@`
  echo $resp | jq '.' 2> /dev/null
  if [[ $? -ne "0" ]]; then
    echo $resp
  fi
}
alias aw='amzn'

ec2(){
  amzn ec2 $@
}

ecs(){
  amzn ecs $@
}

elb(){
  amzn elb $@
}

s3(){
  amzn s3 $@
}

s3api(){
  amzn s3api $@
}

# Git

alias gitrev="git log HEAD~1..HEAD --pretty=format:'%h' | cat"
alias st="git status ."
alias commit="git commit -v -m \"$DEFAULT_COMMIT_MESSAGE\" --edit"
alias amend="git commit --amend"
alias amend!="git commit --amend --no-edit"
fixup(){ # interactive fixup. requires https://github.com/thoughtbot/pick
  rev=`git log --pretty=format:'%h %s' | pick | cut -d' ' -f1`
  git commit --fixup $rev
}
fixup!(){ # same as `fixup` but includes an interactive rebase
  rev=`git log --pretty=format:'%h %s' | pick | cut -d' ' -f1`
  git commit --fixup $rev
  git rebase -i "$rev^" --autostash
}

irebase(){
  num_commits=$1;

  if [[ $# -ne 1 ]]; then
    num_commits=`git log origin/master..HEAD | wc -l`
  fi

  git rebase -i "HEAD~$num_commits" --autostash
}

fetch-remotes(){
  git remote | xargs --no-run-if-empty --max-args 1 -L1 git fetch
}

pick-remote(){
  remote=$(git branch --remote | pick)

  echo "${remote// /}"
}

rebase-pr(){
  echo "Fetching remotes"
  fetch-remotes

  remote=$(pick-remote)

  echo "Rebasing $remote"
  git rebase --interactive --no-autosquash --autostash --preserve-merges $remote
}

alias open-conflicts="git diff --name-only | uniq | xargs -L1 $EDITOR"

alias wip-commit="git commit -m 'WIP'"

# Ruby

alias parser="ruby-parse -e"
alias be="bundle exec"
alias bu="bundle update"
alias bul="bundle update --local"
alias bil="bundle install --local"

# Requires `rerun`: `gem install rerun` (https://github.com/alexch/rerun)
alias reruby="rerun --clear --exit --background --no-growl ruby"

# Haskell

alias haskell="clear;ghci"
alias ghci="ghci -v0"